'use server';
/**
 * @fileOverview A flow for sending WhatsApp messages generated by an AI.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { type Client } from 'whatsapp-web.js';
import { doc, updateDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';

const ContactSchema = z.object({
    id: z.string(),
    name: z.string(),
    phone: z.string().optional(),
    product: z.string(),
    userId: z.string(),
});
export type Contact = z.infer<typeof ContactSchema>;

const SendMessageInputSchema = z.object({
  contacts: z.array(ContactSchema),
  client: z.any().describe("The authenticated whatsapp-web.js client instance."),
});

export type SendMessageInput = z.infer<typeof SendMessageInputSchema>;

// Define the prompt for generating the recovery message
const generateRecoveryMessagePrompt = ai.definePrompt({
  name: 'generateRecoveryMessage',
  input: {
    schema: z.object({
      name: z.string(),
      product: z.string(),
    }),
  },
  output: {
    schema: z.object({
        message: z.string().describe("The generated recovery message to be sent to the user.")
    })
  },
  prompt: `Você é um especialista em vendas carismático e amigável. Sua tarefa é escrever uma mensagem curta e persuasiva para um cliente que abandonou um carrinho de compras.

O tom deve ser prestativo e nunca agressivo. O objetivo é reengajar o cliente e lembrá-lo do produto que ele estava prestes a comprar.

Use o nome do cliente e o nome do produto fornecidos para personalizar a mensagem.

Cliente: {{{name}}}
Produto: {{{product}}}

Gere apenas o texto da mensagem a ser enviada.`,
  model: 'openai/gpt-4o'
});


export async function sendMessage(input: SendMessageInput): Promise<void> {
  await sendMessageFlow(input);
}

const sendMessageFlow = ai.defineFlow(
  {
    name: 'sendMessageFlow',
    inputSchema: SendMessageInputSchema,
    outputSchema: z.void(),
  },
  async ({ contacts, client }) => {
    console.log(`Received ${contacts.length} contacts to message.`);
    
    for (const contact of contacts) {
      if (contact.phone) {
        // Format phone number for whatsapp-web.js (e.g., 5511999999999@c.us)
        const sanitizedPhone = contact.phone.replace(/[^0-9]/g, '');
        const chatId = `${sanitizedPhone}@c.us`;
        
        try {
          // Generate the message using the AI prompt
          console.log(`Generating message for ${contact.name} and product ${contact.product}...`);
          const { output } = await generateRecoveryMessagePrompt({
            name: contact.name,
            product: contact.product,
          });

          if (!output?.message) {
            console.error(`AI failed to generate a message for contact ${contact.id}.`);
            continue; 
          }
          const message = output.message;
          
          console.log(`Sending message to ${chatId}: "${message}"`);
          const whatsappClient = client as Client;
          await whatsappClient.sendMessage(chatId, message);
          
          // Update contact status to 'Contatado' in Firestore
          const contactRef = doc(db, 'contacts', contact.id);
          await updateDoc(contactRef, {
            status: 'Contatado'
          });
          
          console.log(`Successfully sent message and updated status for contact ${contact.id}`);
        } catch (error) {
          console.error(`Failed to send message or update status for contact ${contact.id} (${contact.name}) at ${chatId}:`, error);
        }
      } else {
        console.log(`Skipping contact ${contact.name} (ID: ${contact.id}) due to missing phone number.`);
      }
    }
  }
);
